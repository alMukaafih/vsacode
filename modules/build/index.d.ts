/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface TtfOptions {
    url: string;
    description: string;
    version: string;
}
export interface FormatOptions {
    ttf?: TtfOptions;
}
export interface RunnerOptions {
    name: string;
    prefix: string;
    codepoints: Record<string, number>;
    inputDir: string;
    outputDir: string;
    fontTypes: import("fantasticon").FontAssetType[];
    normalize: boolean;
    formatOptions: FormatOptions;
}
export const enum ArgType {
    Flag = 0,
    Param = 1,
}
export interface Arg {
    type: ArgType;
    key: string;
    value?: string;
}
export interface Env {
    args: Array<Arg>;
    home: string;
    isDebug: boolean;
    tmpDir: string;
}
export interface Attribute {
    fill: string;
}
export interface Params {
    attrs: string;
    attributes?: Array<Attribute>;
}
export interface Plugin {
    name: "removeAttrs";
    params: Params;
}
export interface SvgoConfig {
    plugins: Array<Plugin>;
}
export interface WebPackOutput {
    /** The output directory as an absolute path. */
    path: string;
    /** Clean the output directory before emit. */
    clean: boolean;
}
export interface WebPackCache {
    /** Base directory for the cache. Defaults to node_modules/.cache/webpack. */
    cacheDirectory?: string;
    /** Compression type used for the cache files. By default it is false. */
    compression: "gzip";
    /**
     * cache.store tells webpack when to store data on the file system.
     * - 'pack': Store data when compiler is idle in a single file for all cached items
     */
    store: "pack";
    /** Sets the cache type to either in memory or on the file system. */
    type: "filesystem";
    /**
     * Version of the cache data.
     * Different versions won't allow to reuse the cache and override existing content.
     * Update the version when configuration changed in a way which doesn't allow to reuse cache.
     * This will invalidate the cache.
     */
    version: string;
}
export interface WebPackConfig {
    /**
     * The base directory, an absolute path, for resolving entry points and loaders from the configuration.
     * By default, the current working directory of Node.js is used, but it's recommended to pass a value in your configuration.
     * This makes your configuration independent from CWD (current working directory).
     */
    context: string;
    /**
     * An entry point indicates which module webpack should use to begin building out its internal dependency graph.
     * Webpack will figure out which other modules and libraries that entry point depends on (directly and indirectly).
     */
    entry: string;
    /** The output property tells webpack where to emit the bundles it creates and how to name these files. */
    output: WebPackOutput;
    /**
     * By setting the mode parameter to either development,
     * production or none, you can enable webpack's built-in optimizations that correspond to each environment.
     * The default value is production.
     */
    mode: "production" | "development";
    /** Cache the generated webpack modules and chunks to improve build speed. */
    cache: WebPackCache;
}
/** Main Component. */
export declare class Binding {
    constructor(
        env: Env,
        fantasicon: (arg: RunnerOptions) => void,
        svgo: (arg0: string, arg1: SvgoConfig) => string,
        webpack: (arg: WebPackConfig) => Promise<boolean>,
    );
    init(): void;
}
